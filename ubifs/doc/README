
Installing ubiboot N9 environment
---------------------------------



Introduction

    Ubiboot is a boot manager for N9(50) devices. Useing the example configuration it is fairly
    easy to triple-boot the device between Harmattan/Nitdroid/Nemo OS'es, and change kernels at will.

    Ubiboot is mainly aimed at developers and advanced users, so be warned. The procedures in this
    guide require understanding of the structure of an *nix filesystem and knowledge to work on
    a shell prompt.

    Benefits of ubiboot N9
      - You can have multiple boot OS'es, each with multiple optional kernels on the device.
      - Selecting the boot kernel is quick and easy with the graphical touchscreen menus
      - You will not need to flash the device to install and test a new kernel, just copying the kernel
        and modules to the device is enough.
      - You have integrated repair/maintanance mode on the device, where you can export all partitions
        for backup/restore to a PC automatically
      - You can telnet to the device in maintanance mode, to do any desired repair operations

    Ubiboot comes in two varieties, traditional version that installs on MTD partition of the device
    and intregrated version that does not need partition preparation.

    Unless you have some specific need it is adviced that you should choose ubiboot-02, the integtated
    version.



Prerequisites: IMPORTANT!

1.) You need to be running the device in open mode, and if you do not have open mode enabled
    before this procedure, your device will automatically be in open mode afterwards.

    This is generally a good thing, but you need to know few things about it first.
      - If you have not disabled it, the device will show an "open mode warning" on boot
      - If you have not recreated your password storages, your passwords (facebook, email, etc..)
        will not be stored correctly and you will be prompted for passwords every time you
        start the application.

    To fix these things, look up the solutions on TMO (talk.maemo.org) before entering open mode.


    Additional info about open mode:

    If you have not yet enabled open mode, it is advisable to do so before starting to install ubiboot.
    Some people have run into difficulties which can be avoided if your device is in Open Mode before
    You start these procedures.
    Generally, if you trigger open mode accidentally or on purpose without preparing the device for
    it, you will be getting an ugly boot warning that says "device is not using authorised NOKIA SW"
    and giving all kinds of warnings. You usually want to get rid of this warning.

    How to do it; you have to disable it BEFORE entering open mode. Afterwards it cannot be done.
    So, if you have this warning at boot, you need to first flash your device fith full rootfs+emmc
    image to get back to closed mode.
    When in closed mode, you need to give the following command: "disclaimer-cal remove View-openmode"
    This will remove the warning, and then you can flash the open mode kernel, for example using the
    file zImage_2.6.32.54-openmode_l2fix found at the ubiboot page:
    "sudo flasher -a firmware.bin -k zImage_2.6.32.54-openmode_l2fix --flash-only=kernel -f -R"


2.) Ubiboot comes in several varieties:

      - ubiboot-01-mtd4
      - ubiboot-01-mtd5
      - ubiboot-02 (integrated)

    the 01-versions contain a kernel that mounts either mtd4 or mtd5 as root partition.
    The original ubiboot (01-mtd4) was only able to use the larger of these partitions, mtd4 (414.8M).
    The next modification (01-mtd5) uses the smaller mtd5 partition. (24.5M)

    Reason for having 2 different versions was that NAND flash if fairly brittle and not all people
    can use on or the other at all; if there are too many bad blocks the area is not usable for
    a mountable filesystem. Hopefully either one is available for most people.

    Some people have deployed a tweak "Additional Swap File using NAND Flash", where the mtd4 partition
    is used for extra swap space. If you have that enabled, then your only choise is to use the second
    variant of ubiboot that lives on mtd5.

    The currently supported ubiboot-02 (integrated) differs from the 01-versions so that it does not
    any longer need to mount mtd partitions to work. Instead the kernel contains initramfs that itself
    has all the tools needed to boot 2nd-stage kernels and manage repair operations.
    To not make the kernel uncomfortably large, it has the ability to load extensions from filesystem,
    for example the graphical menu package is loaded this way.

    Unless you have some specific need it is adviced that you should choose ubiboot-02, the integtated
    version.


3.) It might help if you already have alternate OS'es installed (currently supporting Nitdroid and Nemo)
    but it is also possible to install this environment on pure Harmattan device, and possibly install
    additional OS'es later.


4.) Some people have faced issues when booting the vanilla Harmattan kernel on Harmattan OS.
    The vanilla kernel has a bug/feature that the CPU L2 cache is not correctly turned on when the
    kernel is chainloaded by kexec(). In normal boot this causes no issues but on ubiboot the system
    will be very slow during first minute or so.
    On my system it only makes Harmattan boot slow, but some people have reported that their devices
    will reboot, propably due to some software components timing out due to the slow startup.

    The fix is to use the patched openmode+L2fix kernel provided here:
    (zImage_2.6.32.54-openmode_l2fix, md5sum=b64bc24b96faf6763f5e403eb5c7f528)
    That kernel is module-compatible with original harmattan kernel, you do not need to update anything
    else except copy that kernel to your /boot/ directory on Harmattan and update your /etc/boot.conf
    on the ubiboot FS.

    The patch against vanilla kernel_2.6.32-20121301+0m8.tar is included (openmode_l2fix.patch)



Installing ubiboot to your device

    Installing ubiboot-02 is described first as it is now the preferred solution.
    Because ubiboot-02 mounts the mtd4/mtd5 partititions in read-only mode even when installed there,
    it will cause less wear on your flash file system which is a good thing.
    ubiboot-01 will mount mtd4/mtd5 partitons in read-write mode once each boot so any access to the
    filesystem will wear out a part of your eraseblocks.


1.) Installing ubiboot-02 (integrated version)

1.1.) The needed files and tools.

      - Harmattan flasher (version 3.12.1)
      - Harmattan firmware.bin (DFL61_HARMATTAN_40.2012.21-3_PR_LEGACY_001-OEM1-958_ARM.bin)
        (or any suitable firmaware localized to your device)

      - Boot kernel to flash to your device
        (zImage_2.6.32.54-ubiboot-02_031013, md5sum=f27e443b8a1997703c3a5a446caa5719)

      - Configuration file
        (ubiboot.conf,                       md5sum=166bc4ad7019fef507affc7b502d5afc)

      - Latest loadable filesystem extension with boot menus
        (ubiboot-02.menus.cpio,              md5sum=fa80955d84514867f76c1bca3068e217)

      - Preinit scripts for Harmattan and Nitdroid
        (preinits.tar,                       md5sum=e1878ecd1bebfade281b6ffe87276e07)

      The kernel, configuration file and root FS cpio can be downloaded as a single tar file from
      http://www.swagman.org/juice/ubiboot/ubiboot-02/ubiboot-02_0.3.4_081013.tar
      (md5sum=17e83a6a09d75dd17bcc7faeaca7dce0)
 
      - Optional: If you want to moidify the boot menus, you need the latest tools
        (animatronics_03102013.tar)


1.2.) Selecting the place where to install the configuration and filesystem extension

      In the bootup phase ubiboot-02 kernel searches for the ubiboot.conf file, which contains the
      location of the rest of the system to be loaded.

      The lookup order is as follows: mtd4, mtd5, /boot/-directories of all partitions.
      It is easiest to store the FS extension on the /dev/mmcblk0p1 (MyDocs) partition, and for most
      people that is the preferred solution.

      To do that, create directory /boot/ on your Mydocs anD copy the ubiboot.conf and ubiboot-02.menus.cpio
      to that location. Review the configuration of your device against ubiboot.conf, as the defaults might
      not be suitable to you.

      If you want to use mtd4 or mtd5 as your filesystem extension, see the ubifs preparation instructions
      for ubiboot-01 in 2.1.1) and 2.1.2.).


2.) Installing ubiboot-01 (traditional)

      NOTE! Unless you REALLY know what you are doing, use ubiboot-02.
            Currently ubiboot-01 is not supported any more!

      NOTE! Belive me, just skip to the section 3.) and continue from there!

2.1.) The needed files and tools.

      - Harmattan flasher (version 3.12.1)
      - Harmattan firmware.bin (DFL61_HARMATTAN_40.2012.21-3_PR_LEGACY_001-OEM1-958_ARM.bin)
        (or any suitable firmaware localized to your device)

      - Boot kernels to flash to your device
        (zImage_2.6.32.54-ubiboot-01-mtd4,   md5sum=95be31df0a4255e6bb46c0b08f4c07ce)
        (zImage_2.6.32.54-ubiboot-01-mtd5,   md5sum=3f7c3dfabe2755579456d78f7f0420e4)

      - Root filesystem which contains the boot selection
        (ubiboot_fs-01.tar, md5sum=f0510210d4e6fa02ce5e592b2d5c57f5)

      - Preinit scripts for Harmattan and Nitdroid (preinits.tar)

      - Optional: If you want to moidify the boot menus, you need the latest tools
        (animatronics_27022012.tar)

 
2.2.) Preparing the boot partition

      First you need to select which partition you will use, mtd4 or mtd5.
      The commands to prepare the partition differ a bit but same rootfs image can be used on
      either possible install partition.


2.2.1.) Using mtd4 partition

        This is the "traditional" ubiboot partition, I have been using this myself extensively for
        a long time without any ill effects. This is the most thoroughly tested option to use.

        The root partition shall be mtd4 which is reserved for "var" in N9 but currently unused.
        Be sure to make the following operations on the MTD4 partition, as other partitions contain
        sensitive data that you do not want to destroy. Doing so may well brick your device!

        IMPORTANT NOTE!
        When you clear the mtd4 partition, make sure that you have not attached the ubi device!!
        There is a potential flasher/kernel bug that might brick your device permanently by wiping CAL
        if you have bad luck!
        Currently this is known to only affect you if you use "/usr/sbin/flash_erase" after you have
        done "/usr/sbin/ubiattach /dev/ubi_ctrl -m 4", so be careful of the order you give these commands!
        It is safest to make sure you are in open mode, and boot the device. Then, immediately after the
        boot clear the flash before any other operations.
        Note that you need only ever clear the flash once, it is an operation that you do not need to
        repeat. If you want to clear your ubifs partition sometime afterwards, it is enough to use the
        "/usr/sbin/ubimkvol" command.

        First thing to do is to create a 480MB ubifs filesystem on the "var" partition:

          /usr/sbin/flash_erase /dev/mtd4 0 0
          /usr/sbin/ubiattach /dev/ubi_ctrl -m 4
          /usr/sbin/ubimkvol /dev/ubi0 -N var -m
          mount -t ubifs ubi0:var /mnt

        Some people seem to have problems when mounting the ubi device on /mnt. Before proceeding, check
        that you have really mounted it correctly. When you give command "mount | grep ubi" you should
        see something like this: "ubi0:var on /mnt type ubifs (rw,relatime)"


2.2.2.) Using mtd5 partition

        This option is for people who either have damaged mtd4 partition or who are using their mtd4 for
        extended swap size. This is a newer development but it has been noted to work correctly and is
        by all means identical to mtd4 ubiboot.

        The root partition shall be mtd5 which was originally reserved for "moslo", extra open mode kernel
        as Meego OS Loader. It is currently unused on N9.
        Be sure to make the following operations on the MTD5 partition, as other partitions contain
        sensitive data that you do not want to destroy. Doing so may well brick your device!

        On my device it was not necessary to erase the flash on mtd5 before proceeding, as t was already
        been formatted for ubifs. To find out if that is the case, check the content via command:

          cat /dev/mtd5 | strings

        If the result is long string of "UBI#"'s, then the partition does not need to be erased.
        Use the following commands to create 33MB ubifs filesystem on the "moslo" partition:

          /usr/sbin/ubiattach /dev/ubi_ctrl -m 5
          /usr/sbin/ubimkvol /dev/ubi0 -N moslo -m
          mount -t ubifs ubi0:moslo /mnt

        Some people seem to have problems when mounting the ubi device on /mnt. Before proceeding, check
        that you have really mounted it correctly. When you give command "mount | grep ubi" you should
        see something like this: "ubi0:moslo on /mnt type ubifs (rw,relatime)"


2.3.) When you have successifully created your ubifs system, either on mtd4 or mtd5, you need next to
      copy and untar the boot system on the created partiton:

        tar -xvf ubiboot_fs.tar -C /mnt/
        sync


3.) Next, you must configure your 2nd level boot kernels, or at leat one OS and kernel.
    If you do not do this correctly you will be stuck on the boot selector with nothing
    to boot up to.

    Note that when updating from a previous release, most often than not the new release has matching
    kernel, rootFS and ubiboot.conf. You HAVE TO use the latest ubiboot.conf as it might have new
    features that the kernel and/or rootFS depend on.
    Hence, you need to update your kernel configuration to the new ubiboot.conf from your existing
    configuration file.

    Bootable OS & kernel configuration is done in the file "/etc/boot.conf" on the ubifs when you are
    using ubiboot-01. For ubiboot-02 the configuration file is "ubiboot.conf" that you have either on
    mtd4, mtd5 or mmcblk0p1/boot.

    For both files the structure of the kernel defilition part is similar.
    There are 6 entries for Nitdroid, 6 entries for Harmattan and 6 entries for Nemo.
    You do not need to fill up everything, of course. Just the bits you have on your N9.

    The "G_<os>_<n>_LABEL" identifier is the line shown on the menu.
    The corresponding "G_<os>_<n>_FILE" is the path to the bootable kernel.
    Note the "G_<os>_NUM" variable, this tells the menu how many lines to show, starting
    from the line 1.
    The filesystem is pre-set to that "/boot/Harmattan" is a link to "/mnt/2" which is
    mounted as /dev/mmcblk0p2 and "/boot/Nemo"  is a link to "/mnt/4" which is mounted
    as /dev/mmcblk0p4.

    If, for example your Nemo partition is something else than 4, then you need to update
    symlinks in /boot/ to point to correct loactions and make sure that you mount the
    partitions before kernel selection is done (kexec_load needs to see the kernels...)

    In my own setup Harmattan and Nemo kernels are stored in "/boot/Harmattan/boot/"
    and Nemo kernels in "/boot/Nemo/boot/"

    You need to copy your kernels to the correct location!

    The modules for the kernels are located in each OS's hierarchy, normally in the
    "/lib/modules" directory.
    Do not forget to have the correct modules there, and remember to do "depmod -a <name>"
    if you are copying new modules to the directory!


4.) Copy the harmattan and Nitdroid preinit files to the Harmattan root file system,
    into the "/sbin/" directory. This is nondestructive operation even if you are not
    installing the boot FS yet, as the files in the tarball, "/sbin/preinit_harmattan" and
    "/sbin/preinit_nitdroid" are not used for anything in normal use without ubiboot.

      tar -xvf preinits.tar -C /

    Make sure that the correct entries are in the "/etc/boot.conf" of your ubifs.

    When you are done, unmount your ubifs partition and sync FS:es:

      umount /mnt
      sync


5.) Finally, you need to flash the ubiboot kernel image to the device.
    This is the last step, and the only one where your mistake actually can get the device
    into a state needing repair.

5.1.) For ubiboot-01_mtd4, flash the kernel as follows:

       sudo flasher -a firmware.bin -k zImage_2.6.32.54-ubiboot-01-mtd4 --flash-only=kernel -f -R

5.2.) For ubiboot-01_mtd5, flash the kernel as follows:

       sudo flasher -a firmware.bin -k zImage_2.6.32.54-ubiboot-01-mtd5 --flash-only=kernel -f -R

5.3.) For ubiboot-02, flash the kernel as follows:

       sudo flasher -a firmware.bin -k zImage_2.6.32.54-ubiboot-02_040413 --flash-only=kernel -f -R


6.) If you followed this procedure correctly, then the device boots now with the ubiboot
    kernel. If you remove the USB cable, you will be presented with the animated top menu.

    If you leave the USB cable connected, you will enter the maintanance mode where partitions
    of your mmcblk0 are automatically offered for mounting on the PC.
    In the maintatance mode you can also telnet to the default device address (192.168.2.15)



Configuration and personification

    You can change the "info" screen content to show for example your name and address for
    the purpose of identifying a lost device.
    To modify this screen you need to download the animatronics_27022012.tar file and extract
    it to a directory on your linux PC. Then create a 400x400 pixel PNG image that you want to
    display and store it as "imagebase/ownerpanel.png" Lastly, run the ./create_animations.sh
    script. Copy the resulting tar file to your "/boot/menu/animation" directory and extract
    the contents.

    The device boot behaviour can be adjusted by editing the boot.conf or ubiboot.conf on your device.
    Normally, if you have the device connected to PC when you boot it, instead of the boot
    menu you will set the device to maintanance mode. In maintanance mode you can telnet
    to the device and/or export the /dev/mmcblk0 partitions to external PC.
    To enable/disable these options, see the config file.



Uninstallation

    If you want to get rid of ubiboot entirely, it is easy. You only need to flash a new
    kernel image that boots the original Harmattan installation on /dev/mmcblk0p2.
    You can use, for example the openmode+L2fix kernel provided on the page:

       sudo flasher -a firmware.bin -k zImage_2.6.32.54-openmode_l2fix --flash-only=kernel -f -R

    After that command you will not boot to ubifs any longer, instead the original Harmattan
    OS will boot normally.

    There is no need to remove the files from mtd partitions, when you have flashed a generic
    kernel the partitions will no longer make any difference to your devices operation.



Further development

    If you want to compile the ubiboot kernel yourself, you need to get the MOSLO kernel sources,
    for example: https://github.com/nemomobile/kernel-adaptation-n950-n9/tree/mer-n9-2.6.32-20121301

    The kernel compiling can be done for example using the arm-linux-gnueabi-gcc tools:

       ARCH=arm make clean
       ARCH=arm make mrproper
       ARCH=arm make rm696_nemo_defconfig
       ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- make
       ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- make modules
       ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- INSTALL_MOD_PATH=. make modules_install

    The sources directory contains patches against the MOSLO kernel.

    * Building ubiboot-01 kernel:

    The patch ubiboot-01.patch is used to create the ubiboot-01 kernel. There is no additinal required
    files, just edit CONFIG_CMDLINE in the rm696_nemo_defconfig file to select which mtd partition you
    want to boot the kernel on.

    The ubiboot-01 FS can easiest be edited in place, just mount the mtd4/mtd5 partition and modify
    on the device.

    * Building ubiboot-02 kernel:

    The patch ubiboot-02.patch is used to create the ubiboot-02 kernel.
    Additionally you need the rootfs seed which needs to be unpacked under the usr hierarchy on your
    kernel build directory. The rootfs seed is the file ubifs_<date>.tar
    Because the rootfs seed includes modules from the current kernel build, building will fail unless
    you have something under lib/modules/ hierarchy of the kernel build directory.
    To avoid this, you can comment out the module lines in ubifs.list file until the modules are built.

    The ubiboot-02 filesystem extension is a cpio archive that is unpacked to the initramfs when
    the kernel finds the ubiboot.conf file.

    To unpack the cpio, use command "cpio -id --no-absolute-filenames < ../ubiboot-02.menus.cpio"
    To repack the edited directioies, use command "find . | cpio -H newc -o > ../ubiboot-02.menus.cpio"
    It's recommended to "chown -R 0.0 *" the dirs before archive repacking, but it's not mandatory.

